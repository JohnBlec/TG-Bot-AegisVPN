from aiogram import html, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from datetime import datetime
from dateutil.relativedelta import relativedelta

import app.database.requests as rq
import app.keyboards as kb


router = Router()


class Register(StatesGroup):
    name = State()


class Date(StatesGroup):
    tg_id = State()
    date = State()


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    result = await rq.set_user(message.from_user.id, message.from_user.full_name)
    if not result:
        await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ! –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        return
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {html.bold(message.from_user.full_name)}!\n"
                         f"–ï—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –í–ü–ù, "
                         f"—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–º–µ–Ω–∏—Ç—å –∏–º—è –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /chname, "
                         f"—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å. –°–ø–∞—Å–∏–±–æ üòä")


@router.message(Command('help'))
async def cmd_help(message: Message) -> None:
    await message.answer("üìÉ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n"
                         "/chname - —Å–º–µ–Ω–∏—Ç—å –∏–º—è –≤ –±–æ—Ç–µ\n"
                         "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ (—Ç–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∞)\n"
                         "/install_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
                         "/faq - —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                         "/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                         "/set_notification - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏\n"
                         "/del_notification - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                         "/switch_notif_mod - –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (1-–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞)\n"
                         "/cancel - –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è")


@router.message(Command('info'))
async def cmd_info(message: Message) -> None:
    await message.answer(f"üóÇ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏–º –≤–ø–Ω-—Å–µ—Ä–≤–∏—Å–æ–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 150—Ä/–º–µ—Å. "
                         f"–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –±—É–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏, —Ç–æ –º—ã –ø–æ—Å—á–∏—Ç–∞–µ–º, "
                         f"—á—Ç–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º –≤—ã –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. "
                         f"–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–∞—Å –ø—Ä–∏–¥—ë—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å.\n\n"
                         f"‚¨õÔ∏è  –¢-–ë–∞–Ω–∫ (–¢–∏–Ω—å–∫–æ—Ñ—Ñ) üü®\n"
                         f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n"
                         f"{html.code('2200701392412133')}\n"
                         f"{html.code('–°–∞—Ñ–∏–Ω –ü–∞–≤–µ–ª –†–∏–º–æ–≤–∏—á')}\n"
                         f"(–ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)\n\n"
                         f"–ò–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
                         f"+79805104653\n\n"
                         f"‚ùì–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º –ª–∏—Ü–∞–º:\n"
                         f"@johnblec (–ü–∞–≤–µ–ª)\n"
                         f"@supremex3000 (–°–µ—Ä–≥–µ–π)")


@router.message(Command('install_info'))
async def cmd_install_info(message: Message) -> None:
    await message.answer(f"‚úçÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –í–ü–ù –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
                         f"1. –°–∫–∞—á–∏–≤–∞–µ–º WireGuard –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ü–ö, –∞–Ω–¥—Ä–æ–∏–¥, –∞–π—Ñ–æ–Ω);\n\n"
                         f"üíª –ü–ö: {html.link('–°–ö–ê–ß–ê–¢–¨', 'https://download.wireguard.com/windows-client/wireguard-installer.exe')}\n"
                         f"üì± Android: {html.link('–°–°–´–õ–ö–ê', 'https://play.google.com/store/apps/details?id=com.wireguard.android')}\n"
                         f"üñ± IOS (iphone): {html.link('–°–°–´–õ–ö–ê', 'https://itunes.apple.com/us/app/wireguard/id1441195209?ls=1&mt=8')}\n\n"
                         f"2. –°–æ–∑–¥–∞—ë–º —Ç—É–Ω–Ω–µ–ª—å, –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–≤ QR-–∫–æ–¥ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏–≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏;\n\n"
                         f"3. –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n\n"
                         f"‚ùî–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –ø–∏—à–∏—Ç–µ:\n"
                         f"@johnblec (–ü–∞–≤–µ–ª)\n"
                         f"@supremex3000 (–°–µ—Ä–≥–µ–π)")


@router.message(Command('faq'))
async def cmd_faq(message: Message) -> None:
    await message.answer(f"FAQ:\n\n"
                         f"{html.blockquote('–û—Ç–∫—É–¥–∞ –º–Ω–µ –≤–∑—è—Ç—å QR-–∫–æ–¥ –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è?')}\n"
                         f"–ò—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∫ @johnblec –∏–ª–∏ @supremex3000\n\n"
                         f"{html.blockquote('–ï—Å–ª–∏ —è –ø–æ–ª—å–∑—É—é—Å—å –í–ü–ù –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ —Ö–æ—á—É –Ω–∞ –∫–æ–º–ø —Å–µ–±–µ, —Ç–æ –Ω—É–∂–Ω–æ –∑–∞ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–ª–∞—Ç–∏—Ç—å?')}\n"
                         f"–ù–µ—Ç. –í—ã –ø–ª–∞—Ç–∏—Ç–µ –∑–∞ –≤–µ—Å—å –í–ü–ù —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–æ–π –Ω–∞ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.\n\n"
                         f"{html.blockquote('–ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å (–∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç –≤ –†–æ—Å—Å–∏–∏), –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—è—Ü(-—ã) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–≥–æ—Ä–∏—Ç(-—è—Ç)?')}\n"
                         f"–ù–µ—Ç. –° —É—á—ë—Ç–æ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º –≤—ã—á—Ç–µ–º –∏ –≤–µ—Ä–Ω—ë–º –¥–µ–Ω—å–≥–∏.\n\n"
                         f"–ù–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞ 3 –º–µ—Å—è—Ü–∞. –ß–µ—Ä–µ–∑ 1,5 –º–µ—Å—è—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Å–µ—Ä–≤–∏—Å.\n"
                         f"450—Ä - (150+75) = 225—Ä\n"
                         f"225 —Ä—É–±–ª–µ–π –≤–µ—Ä–Ω—ë–º.")


@router.message(Command('profile'))
async def cmd_profile(message: Message) -> None:
    u = await rq.get_user(message.from_user.id)
    if u:
        data = await rq.get_payment_term(u.tg_id)
        if data:
            for u, t in data:
                await message.answer(norif_message(u, t))
        else:
            await message.answer(norif_message(u))
    else:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ @johnblec")


async def norif_message(user, term=False):
    message = f"–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:\n\n" + \
              f"ID: {user.tg_id}\n" + \
              f"–ò–º—è –≤ –±–æ—Ç–µ: {user.name}\n"
    if term:
        message += f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {str(term.end_time).split()[0]}\n"
    if user.notif:
        return message + f"–ê–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:–í–∫–ª"
    else:
        return message + f"–ê–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:–í—ã–∫–ª"


@router.message(Command('chname'))
async def cmd_chname(message: Message, state: FSMContext) -> None:
    await state.set_state(Register.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã (—à–∞–±–ª–æ–Ω, –ò–≤–∞–Ω–æ–≤ –ò.):")


@router.message(Command('del_notification'))
async def cmd_del_notif(message: Message) -> None:
    result = await rq.get_payment_term(message.from_user.id)
    if result:
        for u, t in result:
            await rq.set_active_pay_term(t.id)
            await message.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")


@router.message(Register.name)
async def st_reg_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    data = await state.get_data()
    result = await rq.update_user_name(message.from_user.id, data["name"])
    if not result:
        await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ! –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        return
    await message.reply(f'–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {data["name"]}!')
    await state.clear()


@router.message(Command('set_notif_one_time'))
async def cmd_set_notif_one_time(message: Message, state: FSMContext) -> None:
    await state.set_state(Date.date)
    await state.update_data(date='', tg_id=message.from_user.id)
    await message.answer("–ö–æ–≥–¥–∞ –≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É?", reply_markup=kb.start_date)


@router.message(Command('switch_notif_mod'))
async def cmd_switch_notif_mod(message: Message) -> None:
    await rq.update_user_notif(tg_id=message.from_user.id)
    user = await rq.get_user(message.from_user.id)
    if user.notif:
        await message.answer("–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    else:
        await message.answer("–í—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


@router.callback_query(F.data == 'now_date')
async def now_date(callback: CallbackQuery) -> None:
    await callback.answer('–í—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å')
    await callback.message.edit_text('–í—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=kb.months)


@router.callback_query(F.data == 'other_date')
async def other_date(callback: CallbackQuery) -> None:
    await callback.answer('–í—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –¥–µ–Ω—å')
    await callback.message.edit_text('–í—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –¥–µ–Ω—å')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã (–ù–∞–ø—Ä–∏–º–µ—Ä, 11.11.2024):')


@router.message(Date.date)
async def st_date(message: Message, state: FSMContext) -> None:
    date_text = message.text
    if not date_text.replace('.', '').isdigit() or date_text.count('.') != 2:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, "
                            "—á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return
    try:
        validated_date = datetime.strptime(date_text, '%d.%m.%Y')
        if validated_date.date() > datetime.now().date():
            await message.reply(
                "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return
        await state.update_data(date=date_text)
        await message.reply(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=kb.months)
    except ValueError:
        await message.reply(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@router.callback_query(F.data == 'one_month')
async def one_month(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    result = await rq.set_payment_term(data["tg_id"], data["date"], 1)
    await set_date_func(callback, result, data["date"], data["tg_id"], 1)
    await state.clear()


@router.callback_query(F.data == 'three_month')
async def three_month(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    result = await rq.set_payment_term(data["tg_id"], data["date"], 3)
    await callback.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞', show_alert=True)
    await set_date_func(callback, result, data["date"], data["tg_id"], 3)
    await state.clear()


@router.callback_query(F.data == 'six_month')
async def six_month(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    result = await rq.set_payment_term(data["tg_id"], data["date"], 6)
    await callback.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', show_alert=True)
    await set_date_func(callback, result, data["date"], data["tg_id"], 6)
    await state.clear()


@router.callback_query(F.data == 'twelve_month')
async def twelve_month(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    result = await rq.set_payment_term(data["tg_id"], data["date"], 12)
    await callback.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤', show_alert=True)
    await set_date_func(callback, result, data["date"], data["tg_id"], 12)
    await state.clear()


async def set_date_func(callback: CallbackQuery, result: bool, start_date: str, tg_id: int, count_months: int) -> None:
    if result:
        if start_date:
            d = datetime.strptime(start_date, '%d.%m.%Y')
        else:
            d = datetime.now().date()
        next_d = d + relativedelta(months=count_months)
        await callback.message.edit_text(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫ –¥–∞—Ç–µ: {next_d}')
    else:
        data_rq = await rq.get_payment_term(tg_id)
        for user, date in data_rq:
            date, time = str(date.end_time).split()
            await callback.message.edit_text(f'–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {date}')


@router.callback_query(F.data == 'cancel')
async def cancel(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer('–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    await callback.message.edit_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞...')
    await state.clear()


@router.message()
async def echo_handler(message: Message) -> None:
    try:
        await message.answer("–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª(\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–æ—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.")
    except TypeError:
        await message.answer("–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞!)")
